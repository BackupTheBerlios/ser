<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
   "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<section id="blst.functions" xmlns:xi="http://www.w3.org/2001/XInclude">
    <sectioninfo>
	<revhistory>
	    <revision>
		<revnumber>$Revision: 1.1 $</revnumber>
		<date>$Date: 2007/07/30 20:04:13 $</date>
	    </revision>
	</revhistory>
    </sectioninfo>

    <title>Functions</title>

    <section id="blst_add">
	<title>
	    <function>blst_add([timeout])</function>
	</title>
	<para>
		Adds the source of the current message to the blacklist for
		<varname>timeout</varname> seconds. If timeout is missing or 0
		 it uses the default blacklist timeout 
		 (<varname>dst_blacklist_expire</varname>).
	</para>
	<example>
	    <title><function>blst_add</function> usage</title>
	    <programlisting>
...
if (src_ip==10.0.0.0/9)
    blst_add(30); # 30 s
else
    blst_add();  # use default blacklist timeout
...
	    </programlisting>
	</example>
    </section>


    <section id="blst_add_retry_after">
	<title>
	    <function>blst_add_retry_after(min, max)</function>
	</title>
	<para>
		Adds the source of the current message to the blacklist for
		the time interval specified in the <emphasis>Retry-After</emphasis> 
		header.
		If the <emphasis>Retry-After</emphasis> header is missing, it will 
		fail (returns false).
		If the <emphasis>Retry-After</emphasis> value is less then 
		<varname>min</varname>, then <varname>min</varname> seconds will be 
		used instead.
		If the <emphasis>Retry-After</emphasis> value is greater then 
		<varname>max</varname>, then <varname>max</varname> seconds will be 
		used instead.
	</para>
	<example>
	    <title><function>blst_add_retry_after</function> usage</title>
	    <programlisting>
...
# on_reply route
if (msg_status==503){ # blacklist 503 source for Retry-After seconds
    if (! blst_add_retry_after(30, 3600))
        blst_add(60); # if no retry_after header add it for 60s
}
...
	    </programlisting>
	</example>
    </section>

    <section id="blst_del">
	<title>
	    <function>blst_del()</function>
	</title>
	<para>
		Removes the source of the current message from the blacklist.
		If the address is not present in the blacklist at the time of the call
		it returns false.
	</para>
	<example>
	    <title><function>blst_del</function> usage</title>
	    <programlisting>
...
    blst_del();
...
	    </programlisting>
	</example>
    </section>

    <section id="blst_is_blacklisted">
	<title>
	    <function>blst_is_blacklisted()</function>
	</title>
	<para>
		Returns true if the source of the current message is blacklisted.
	</para>
	<example>
	    <title><function>blst_is_blacklisted</function> usage</title>
	    <programlisting>
...
    if (blst_is_blacklisted()){
        log("message from a blacklisted source");
        drop;
   }
...
	    </programlisting>
	</example>
    </section>

</section>
