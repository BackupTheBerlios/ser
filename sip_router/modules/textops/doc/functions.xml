<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4//EN"
                      "file:///usr/share/sgml/docbook/dtd/xml/4/docbookx.dtd">

<section id="textops.functions" xmlns:xi="http://www.w3.org/2001/XInclude">
    <sectioninfo>
	<revhistory>
	    <revision>
		<revnumber>$Revision: 1.1 $</revnumber>
		<date>$Date: 2005/07/23 23:30:16 $</date>
	    </revision>
	</revhistory>
    </sectioninfo>

    <title>Functions</title>

    <section id="search">
	<title>
	    <function>search(re)</function>
	</title>
	<para>
	    Searches for the re in the message.
	</para>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	    <listitem>
		<para><emphasis>re</emphasis> - Regular expression.
		</para>
	    </listitem>
	</itemizedlist>
	<example>
	    <title><function>search</function> usage</title>
	    <programlisting>
...
if ( search("[Ss][Ee][Rr]" ) { /*....*/ };
...
	    </programlisting>
	</example>
    </section>

    <section id="search_append">
	<title>
	    <function>search_append(re, txt)</function>
	</title>
	<para>
	    Searches for the first match of re and appends txt after it.
	</para>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	    <listitem>
		<para><emphasis>re</emphasis> - Regular expression.
		</para>
	    </listitem>
	    <listitem>
		<para><emphasis>txt</emphasis> - String to be appended.
		</para>
	    </listitem>
	</itemizedlist>
	<example>
	    <title><function>search_append</function> usage</title>
	    <programlisting>
...
search_append("[Ss]er", " blabla");
...
	    </programlisting>
	</example>
    </section>

    <section id="replace">
	<title>
	    <function>replace(re, txt)</function>
	</title>
	<para>
	    Replaces the first occurrence of re with txt.
	</para>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	    <listitem>
		<para><emphasis>re</emphasis> - Regular expression.
		</para>
	    </listitem>
	    <listitem>
		<para><emphasis>txt</emphasis> - String.
		</para>
	    </listitem>
	</itemizedlist>
	<example>
	    <title><function>replace</function> usage</title>
	    <programlisting>
...
replace("ser", "Sip Express Router");
...
	    </programlisting>
	</example>
    </section>
    
    <section id="subst">
	<title>
	    <function>subst('/re/repl/flags')</function>
	</title>
	<para>
	    Replaces re with repl (sed or perl like).
	</para>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	    <listitem>
		<para><emphasis>'/re/repl/flags'</emphasis> - sed like regular
		    expression. flags can be a combination of i (case
		    insensitive), g (global) or s (match newline don't treat it
		    as end of line).
		</para>
	    </listitem>
	</itemizedlist>
	<example>
	    <title><function>subst</function> usage</title>
	    <programlisting>
...
# replace the uri in to: with the message uri (just an example)
if ( subst('/^To:(.*)sip:[^@]*@[a-zA-Z0-9.]+(.*)$/t:\1\u\2/ig') ) {};
...
	    </programlisting>
	</example>
    </section>

    <section id="subst_uri">
	<title>
	    <function>subst_uri('/re/repl/flags')</function>
	</title>
	<para>
	    Runs the re substitution on the message uri (like subst but works
	    only on the uri)
	</para>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	    <listitem>
		<para><emphasis>'/re/repl/flags'</emphasis> - sed like regular
		    expression. flags can be a combination of i (case
		    insensitive), g (global) or s (match newline don't treat it
		    as end of line).
		</para>
	    </listitem>
	</itemizedlist>
	<example>
	    <title><function>subst</function> usage</title>
	    <programlisting>
...
# adds 3463 prefix to numeric uris, and save the original uri (\0 match)
# as a parameter: orig_uri (just an example)
if (subst_uri('/^sip:([0-9]+)@(.*)$/sip:3463\1@\2;orig_uri=\0/i')){$
...
	    </programlisting>
	</example>
    </section>

    <section id="subst_user">
	<title>
	    <function>subst_user('/re/repl/flags')</function>
	</title>
	<para>
	    Runs the re substitution on the message uri (like subst_uri but
	    works only on the user portion of the uri)
	</para>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	    <listitem>
		<para><emphasis>'/re/repl/flags'</emphasis> - sed like regular
		    expression. flags can be a combination of i (case
		    insensitive), g (global) or s (match newline don't treat it
		    as end of line).
		</para>
	    </listitem>
	</itemizedlist>
	<example>
	    <title><function>subst</function> usage</title>
	    <programlisting>
...
# adds 3463 prefix to uris ending with 3642 (just an example)
if (subst_user('/3642$/36423463/')){$
...
	    </programlisting>
	</example>
    </section>

    <section id="append_to_reply">
	<title>
	    <function>append_to_reply(txt)</function>
	</title>
	<para>
	    Append txt to the reply.
	</para>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	    <listitem>
		<para><emphasis>txt</emphasis> - String.
		</para>
	    </listitem>
	</itemizedlist>
	<example>
	    <title><function>append_to_reply</function> usage</title>
	    <programlisting>
...
append_to_reply("Foo: bar\r\n");
...
	    </programlisting>
	</example>
    </section>

    <section id="append_hf">
	<title>
	    <function>append_hf(hf)</function>
	</title>
	<para>
	    Appends txt after the last header field.
	</para>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	    <listitem>
		<para><emphasis>hf</emphasis> - Header field to be appended.
		</para>
	    </listitem>
	</itemizedlist>
	<example>
	    <title><function>append_hf</function> usage</title>
	    <programlisting>
...
append_hf("P-hint: VOICEMAIL\r\n");
...
	    </programlisting>
	</example>
    </section>

    <section id="append_urihf">
	<title>
	    <function>append_urihf(prefix, suffix)</function>
	</title>
	<para>
	    Append header field name with original <acronym>Request-URI</acronym> in middle.
	</para>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	    <listitem>
		<para><emphasis>prefix</emphasis> - string (usually at least header field name).
		</para>
	    </listitem>
	    <listitem>
		<para><emphasis>suffix</emphasis> - string (usually at least line terminator).
		</para>
	    </listitem>
	</itemizedlist>
	<example>
	    <title><function>append_urihf</function> usage</title>
	    <programlisting>
...
append_urihf("CC-Diversion: ", "\r\n");
...
	    </programlisting>
	</example>
    </section>

    <section id="is_present_hf">
	<title>
	    <function>is_present_hf(hf_name)</function>
	</title>
	<para>
	    Return true if a header field is present in message.
	</para>
	<note>
	    <para>
		Takes header field names "as is" and doesn't distinguish compact
		names.
	    </para>
	</note>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	    <listitem>
		<para><emphasis>hf_name</emphasis> - Header field name.
		</para>
	    </listitem>
	</itemizedlist>
	<example>
	    <title><function>is_present_hf</function> usage</title>
	    <programlisting>
...
if (is_present_hf("From")) log(1, "From HF Present");
...
	    </programlisting>
	</example>
    </section>

</section>
