<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4//EN"
                      "file:///usr/share/sgml/docbook/dtd/xml/4/docbookx.dtd">

<section id="registrar" xmlns:xi="http://www.w3.org/2001/XInclude">
    <sectioninfo>
	<authorgroup>
	    <author>
		<firstname>Jan</firstname>
		<surname>Janak</surname>
		<affiliation><orgname>FhG FOKUS</orgname></affiliation>
		<address>
		    <email>jan@iptel.org</email>
		</address>
	    </author>
	</authorgroup>
	<copyright>
	    <year>2003</year>
	    <holder>FhG FOKUS</holder>
	</copyright>
	<revhistory>
	    <revision>
		<revnumber>$Revision: 1.1 $</revnumber>
		<date>$Date: 2005/07/23 23:28:40 $</date>
	    </revision>
	</revhistory>
    </sectioninfo>

    <title>Registrar Module</title>

    <section id="overview">
	<title>Overview</title>
	<para>The module contains REGISTER processing logic.</para>
    </section>

    <section id="nat_support">
	<title>NAT Support In Registrar</title>
	<para>
	    Registrar and usrloc modules implement NAT extensions that ensure
	    that SIP messages beging sent to registered contacts would use the
	    same socket (with the same IP address and port) on which the
	    REGISTER that registered the contact had been received. REGISTER
	    messages generated by user agents behind NAT ofter open a pinhole
	    in the NAT because REGISTER is usually the first message sent from
	    the user agent to the SIP server. A small example follows.
	</para>
	<para>
	    Let's suppose that we have a single SER instance listening on two
	    ports -- 5060 and 5090. Using a different port seems to be often
	    necessary because of broken SIP ALGs (Application Level Gateways)
	    that are often built into DSL routers or other devices. Such ALGs
	    would mangle SIP requests and responses coming to and from port
	    5060 and the only option how to avoid such mangling is using a
	    different port number.
	</para>
	<para>
	    Let's suppose that we have two UAs beind NAT, one of them is configured
	    to reach SER on port 5060, the other one is configured to use port 5090
	    (due to the reasons described above):
	</para>
	<programlisting>
                      SER
                  +---------+
UA1 ---- NAT1 ----| 5060    |
                  |         |
UA2 ---- NAT2 ----| 5090    |
                  +---------+
	</programlisting>
	<para>
	    Registrar and usrloc would store the public IP of NAT with each
	    registered contact, thus it would know how to reach both user
	    agents.
	</para>
	<para>
	    In addition to the publi IP and port of the NAT device, registrar
	    would also remember the destination IP and port of the REGISTER
	    request (the IP and port used in SER). If registrar did not store
	    this information, it would not know what outbound socket it should
	    use when sending SIP messages to the registered contact. It would
	    use the default port number (often 5060) for such outgoing requests.
	</para>
	<para>
	    When an INVITE for UA1 comes, everything would work because UA1
	    used port 5060 when registering and that is also the destination
	    port in the pinhole being kept open in NAT1:
	</para>
	<programlisting>
<![CDATA[
                                 SER
                 INVITE UA1  +--------+     INVITE UA1
UA1 ---- NAT1 <------------- |  5060  | <----------------
                             |        |
UA2 ---- NAT2                |  5090  |
                             +--------+
]]>
	</programlisting>
	<para>
	    When an INVITE for UA2 comes, SER would again use port 5060 as the
	    default outgoing source port number, but this time the message will
	    be dropped by NAT2, because the pinhole opened during the
	    registration has 5060 as the destination port number:
	</para>
	<programlisting>
<![CDATA[
                                 SER
                 INVITE UA2  +--------+     INVITE UA2
UA1 ---- NAT1        +------ |  5060  | <---------------
                     |       |        |
UA2 ---- NAT2 X <----+       |  5090  |
                             +--------+
]]>
	</programlisting>
	<para>
	    That is the reason why registrar and usrloc also need to remmember
	    the IP and port used on the server side, that information would be
	    used later when forwarding INVITEs:
	</para>
	<programlisting>
<![CDATA[
                                 SER
                             +--------+     INVITE UA2
UA1 ---- NAT1                |  5060  | <---------------
                 INVITE UA2  |        |
UA2 ---- NAT2 <------------- |  5090  |
                             +--------+
]]>
	</programlisting>
	<note>
	    <para>
		The X next to NAT2 has disappeared in this picture which means
		that the message will be lucky enough to make it through.
	    </para>
	</note>
	<para>
	    SER would encode this information into a SIP URI when saving contacts in
	    database and later, after restart of SER, this information will be
	    restored. The URI looks like:
	</para>
	<programlisting>
sip:1.2.3.4:5060;dstip=5.6.7.8;dstport=5090
	</programlisting>
	<para>
	    Where the hostname part is the public IP of the NAT, the port
	    (5060) is the port allocated by the NAT, "dstip" parameter is the
	    IP used on SER side and "dstport" parameter is the port number used
	    on SER side during registration. This information is later used to
	    find the correct outgoing socket in SER. If no such socket can be
	    found (it can happen if you reconfigure SER to use different ports
	    or IPs), it will use the default IP/port again.
	</para>
    </section>

    <section id="dependencies">
	<title>Dependencies</title>
	<para>
	    Registrar module depends on the following SER modules:
	    <itemizedlist>
		<listitem>
		    <para>
			<emphasis>usrloc</emphasis> - User Location Module.
		    </para>
		</listitem>
		<listitem>
		    <para>
			<emphasis>sl</emphasis> - Stateless Replies.
		    </para>
		</listitem>
	    </itemizedlist>
	</para>
    </section>

    <xi:include href="params.xml"/>
    <xi:include href="functions.xml"/>

</section>

